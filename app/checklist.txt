How to host a local TLS/SSL server
1) go to https://devcenter.heroku.com/articles/ssl-certificate-self
Notes:
    1. A .csr file is a certificate signing request which initiates your certificate request with a certificate provider and contains administrative information about your organization.
    2. A .key file is the private key used for your site's SSL-enabled requests.
    3. A .crt file is a base64 ASCII encoded file that contains the certificate.

2) In Python, follow these steps:
    1. Import OpenSSL.SSL
    2. Create the SSL context,
        CTX = SSL.Context(SSL.SSLv23_METHOD)
        CTX.use_privatekey_file('server.key')
        CTX.use_certificate_file('server.crt')
    3. Run the application with,
        app.run(<other parameters>, ssl_context=CTX)



How to check password strength
    - https://tech.dropbox.com/2012/04/zxcvbn-realistic-password-strength-estimation/



How to create password hash
    - http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication?lq=1
    - http://pythonhosted.org//passlib/password_hash_api.html#password-hash-examples



How to prevent bruteforce and DoS attacks
    - http://stackoverflow.com/questions/2090910/how-can-i-throttle-user-login-attempts-in-php/2093333#2093333
    - Part VII in http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication?lq=1



How to send email verification and activate users
    - http://flask.pocoo.org/snippets/50/
    - http://flask.pocoo.org/mailinglist/archive/2011/6/22/registration-%2B-email-confirmation/#4c115156664437484d1eee982fa05ae7
    - https://pythonhosted.org/itsdangerous/
    - http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xi-email-support


How to check authentication for every user action (just to make sure)
    - This is not needed. Just have the user re-authenticate if his/her session is "stale" before the user can edit sensitive information (profile, other users).



Why SSL/HTTPS is required all the time for a website that requires authentication
 - http://stackoverflow.com/questions/4309199/must-logins-be-a-https-page?rq=1
 - http://codebutler.com/firesheep/



Dependencies (including pre-installed python modules)
Python==2.7.3
Flask==0.10.1
Flask-Login==0.2.9
Flask-Mail==0.9.0
Flask-SQLAlchemy==1.0
Flask-WTF==0.9.4
sqlalchemy-migrate==0.9
virtualenv==1.11.4
decorator==3.4.0
Twitter bootstrap

Modules
pyOpenSSL
passlib==1.6.2
datetime
os



Useful Documentation + Tutorials
Flask                   http://flask.pocoo.org/docs/
Flask-Login             https://flask-login.readthedocs.org/en/latest/
Flask-Mail              http://pythonhosted.org/flask-mail/
Flask-SQLAlchemy        https://pythonhosted.org/Flask-SQLAlchemy/quickstart.html
Flask-WTF               https://flask-wtf.readthedocs.org/en/latest/api.html
itsdangerous            https://pythonhosted.org/itsdangerous/
WTForms                 http://wtforms.readthedocs.org/en/latest/
virtualenv              http://flask.pocoo.org/docs/installation/#virtualenv
Python PassLib Module   http://pythonhosted.org//passlib/password_hash_api.html
decorator               Because this is Python 2.x
Twitter Bootstrap       http://getbootstrap.com/
Flask "Mega-Tutorial"   http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world